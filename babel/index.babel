const url = "https://s3.amazonaws.com/freecodecamp/drums/";
const soundFilesNamesAndKeys = {
  Q : url + "Heater-1.mp3",
  W : url + "Kick_n_Hat.mp3",
  E : url + "Chord_1.mp3",
  A : url + "Heater-6.mp3",
  S : url + "punchy_kick_1.mp3", 
  D : url + "Brk_Snr.mp3",
  Z : url + "Dry_Ohh.mp3",
  X : url + "Heater-3.mp3",
  C : url + "Dsc_Oh.mp3"
}

class App extends React.Component {
  constructor(props){
    super();
    this.state = { 
      currentSoundText: 'Nothing sounds right now',
      currentSound: ''
    };
    this.handleClickPlay = this.handleClickPlay.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.playSound = this.playSound.bind(this);
  }
  
 componentDidMount() {
   document.addEventListener("keydown", this.handleKeyPress);
  }
  
  componentWillUnmount() {
document.removeEventListener("keydown", this.handleKeyPress);
  }
  
  playSound(){
    const audio = new Audio(this.state.currentSound);
    audio.play();
  }
/* Play audio with javascript
http://stackoverflow.com/questions/9419263/ddg#18628124
*/
  
  handleKeyPress(event){
    
    console.log("EVENT KEY:" + event.key);
    
    const key = event.key.toUpperCase();
    const isValidKey = Object.keys(soundFilesNamesAndKeys).includes(key);
    
    console.log("isValidKey: " + isValidKey);
    
    const currentSound = (isValidKey)? soundFilesNamesAndKeys[key] : '';
    const currentSoundText = ((isValidKey))? soundFilesNamesAndKeys[key] : "That key has no assigned sound.";
    
    /*
    Another idea:
    
    let currentSound = '';
    let currentSoundText = '';
    if (isValidKey){
      currentSound = soundFilesNamesAndKeys[key];
      currentSoundText = currentSound;
    }
    
    */
    
    this.setState(
      {
        currentSound: currentSound,
        currentSoundText: currentSoundText
      }
    );
  }
      
  handleClickPlay(event){
    /* click event handler */
    const drumPadChildren = event.target.children;
    const source = drumPadChildren[0].getAttribute("src");
    // let text = `${source}`
    //console.log(source);
    this.setState({
      currentSoundText: source,
      currentSound: source
    });
  }
  
  render() {
    return (
      <div id="drum-machine">
        <Display currentSoundText={this.state.currentSoundText}/>
   <div id="container">
        {
            Object.keys(soundFilesNamesAndKeys).map((key) => {
              return (
                <DrumPad
                  name={key} 
                  soundFile={soundFilesNamesAndKeys[key]}
                  clickplayer={this.handleClickPlay}
                  key={key}
                />
              )
            })
        }
        </div>
        {(this.state.currentSound)? this.playSound() : ''}
      </div>
    );
  }
}

function Display(props){
    return (
    <div id="display">
      {props.currentSoundText}
    </div>
  )
}

function DrumPad(props) {
  return (
    <div className="drum-pad" id={props.soundFile} onClick={props.clickplayer}>
      {props.name}
      <audio className="clip" id={props.name} src={props.soundFile} type="audio/mp3" ></audio>
    </div>
  )
}

ReactDOM.render(<App />, document.getElementById("app"));