const URL = "https://s3.amazonaws.com/freecodecamp/drums/";
const SOUNDFILE_NAMES_AND_KEYS = {
  Q : "Heater-1",
  W : "Kick_n_Hat",
  E : "Chord_1",
  A : "Heater-6",
  S : "punchy_kick_1", 
  D : "Brk_Snr",
  Z : "Dry_Ohh",
  X : "Heater-3",
  C : "Dsc_Oh"
}

// This is to pass the last test.
const KEYCODES = {
  81 : 'Q',
  87 : 'W',
  69 : 'E',
  65 : 'A',
  83 : 'S',
  68 : 'D',
  90 : 'Z',
  88 : 'X',
  67 : 'C'
};

class App extends React.Component {
  constructor(props){
    super();
    this.state = { 
      currentSoundText: 'Nothing sounds right now',
      currentSoundId: ''
    };
    this.handleClickPlay = this.handleClickPlay.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.playSound = this.playSound.bind(this);
  }
  
 componentDidMount() {
   document.addEventListener("keydown", this.handleKeyPress);
  }
  
  componentWillUnmount() {
document.removeEventListener("keydown", this.handleKeyPress);
  }
  
  playSound(){
    document.getElementById(this.state.currentSoundId).play();
  }

/* Play audio with javascript
http://stackoverflow.com/questions/9419263/ddg#18628124

The Joy of HTML5 Audio: Tips & Tricks for Easy Sound Embedding
https://www.elated.com/articles/html5-audio/
*/
  
  handleKeyPress(event){
    
    // const key = event.key.toUpperCase();
    
    const key = KEYCODES[event.keyCode]; // this is to pass the last test.
    /* 
    Here: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode 
    says that *keyCode* is deprecated and to avoid using it. 
    And here: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
    it is recommended to use *key* instead.
    */
    
    const isValidKey = Object.keys(SOUNDFILE_NAMES_AND_KEYS).includes(key);
    
    let currentSoundText = "That key has no assigned sound.";
    let currentSoundId = '';
    
    if (isValidKey){
      currentSoundText = `Now you are hearing ${SOUNDFILE_NAMES_AND_KEYS[key]}`;
      currentSoundId = key; 
    }
        
    this.setState(
      {
        currentSoundText: currentSoundText,
        currentSoundId: currentSoundId
      }
    );
  }
      
  handleClickPlay(event){
    
    const key = event.target.children[0].id;
        
    this.setState({
      currentSoundText: `Now you are hearing ${SOUNDFILE_NAMES_AND_KEYS[key]}`,
      currentSoundId: key
    });
  }
  
  render() {
    return (
      <div id="drum-machine">
        <Display currentSoundText={this.state.currentSoundText}/>
   <div id="container">
        {
            Object.keys(SOUNDFILE_NAMES_AND_KEYS).map((key) => {
              return (
                <DrumPad
                  name={key} 
                  soundFile={URL + SOUNDFILE_NAMES_AND_KEYS[key] + ".mp3"}
                  clickplayer={this.handleClickPlay}
                  key={key}
                />
              )
            })
        }
        </div>
        {(this.state.currentSoundId)? this.playSound() : ''}
      </div>
    );
  }
}

function Display(props){
    return (
    <div id="display">
      {props.currentSoundText}
    </div>
  )
}

function DrumPad(props) {
  return (
    <div className="drum-pad" id={props.soundFile} onClick={props.clickplayer}>
      {props.name}
      <audio className="clip" id={props.name} src={props.soundFile} type="audio/mp3" ></audio>
    </div>
  )
}

ReactDOM.render(<App />, document.getElementById("app"));